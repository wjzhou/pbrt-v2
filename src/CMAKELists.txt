cmake_minimum_required(VERSION 2.6)
set (renderer_src main/pbrt.cpp)

set (core_src 
     core/api.cpp
     core/camera.cpp
     core/diffgeom.cpp
     core/error.cpp

     core/film.cpp
     core/fileutil.cpp
     core/filter.cpp

     core/floatfile.cpp
     core/geometry.cpp
     core/imageio.cpp

     core/integrator.cpp
     core/intersection.cpp
     core/light.cpp
     
     core/material.cpp
     core/memory.cpp
     core/montecarlo.cpp
     
     core/paramset.cpp
     core/parser.cpp
     core/primitive.cpp
     
     core/parallel.cpp
     core/probes.cpp
     core/progressreporter.cpp
     
     core/quaternion.cpp
     core/reflection.cpp
     core/renderer.cpp
     
     core/rng.cpp
     core/sampler.cpp
     core/scene.cpp
     
     core/sh.cpp
     core/shrots.cpp
     core/shape.cpp
     
     core/spectrum.cpp
     core/targa.c
     
     core/texture.cpp
     core/timer.cpp
     
     core/transform.cpp
     core/volume.cpp )

# flex and bison is not supported on windows.
# Good news is pbrt's parser do not need to rewrite frequently

# parser_flex = env.CXXFile('core/pbrtlex.ll')
# parser_bison = env.CXXFile('core/pbrtparse.yy')
# env.Depends('core/pbrtlex.ll', parser_bison)
# parser_bison.pop()  # yuck a muck, but stop trying to link in pbrtparse.hh!
# core_src = [ parser_flex, parser_bison ] + core_src
LIST(APPEND core_src core/pbrtlex.cpp core/pbrtparse.cpp)

set (accelerators_src  
     accelerators/bvh.cpp
     accelerators/grid.cpp
     accelerators/kdtreeaccel.cpp )

set (cameras_src 
     cameras/environment.cpp
     cameras/orthographic.cpp 
     cameras/perspective.cpp )

set (film_src film/image.cpp)

set (filters_src  
     filters/box.cpp
     filters/gaussian.cpp 
     filters/mitchell.cpp
     filters/sinc.cpp
     filters/triangle.cpp )

set (integrators_src 
     integrators/ambientocclusion.cpp
     integrators/diffuseprt.cpp

     integrators/dipolesubsurface.cpp
     integrators/directlighting.cpp 

     integrators/emission.cpp
     integrators/glossyprt.cpp

     integrators/igi.cpp
     integrators/irradiancecache.cpp 

     integrators/path.cpp
     integrators/photonmap.cpp 

     integrators/single.cpp
     integrators/useprobes.cpp

     integrators/whitted.cpp )

set (lights_src 
     lights/diffuse.cpp
     lights/distant.cpp

     lights/goniometric.cpp
     lights/infinite.cpp

     lights/point.cpp
     lights/projection.cpp 
     lights/spot.cpp)
set (materials_src 
     materials/glass.cpp
     materials/kdsubsurface.cpp

     materials/matte.cpp
     materials/measured.cpp

     materials/metal.cpp
     materials/mirror.cpp

     materials/mixmat.cpp
     materials/plastic.cpp 

     materials/substrate.cpp
     materials/subsurface.cpp

     materials/translucent.cpp
     materials/uber.cpp
     materials/shinymetal.cpp)

set (renderers_src 
     renderers/aggregatetest.cpp
     renderers/createprobes.cpp

     renderers/metropolis.cpp
     renderers/samplerrenderer.cpp

     renderers/surfacepoints.cpp)

set (samplers_src 
     samplers/adaptive.cpp
     samplers/bestcandidate.cpp

     samplers/halton.cpp
     samplers/lowdiscrepancy.cpp 

     samplers/random.cpp
     samplers/stratified.cpp)

set (shapes_src 
     shapes/cone.cpp
     shapes/cylinder.cpp

     shapes/disk.cpp
     shapes/heightfield.cpp

     shapes/hyperboloid.cpp
     shapes/loopsubdiv.cpp

     shapes/nurbs.cpp
     shapes/paraboloid.cpp

     shapes/sphere.cpp
     shapes/trianglemesh.cpp)

set (textures_src 
     textures/bilerp.cpp
     textures/checkerboard.cpp

     textures/constant.cpp
     textures/dots.cpp

     textures/fbm.cpp
     textures/imagemap.cpp 

     textures/marble.cpp
     textures/mix.cpp

     textures/scale.cpp
     textures/uv.cpp

     textures/windy.cpp
     textures/wrinkled.cpp)
set (volumes_src 
     volumes/exponential.cpp
     volumes/homogeneous.cpp 
     volumes/volumegrid.cpp)
     

# The following does not work, because tiff has some cpp for apple or other OS
# some have lib has example.cpp which has main function 
# add 3rd party libs
#macro(add_3rdpart_lib libname libdir)
#file(GLOB ${libname}_src RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${libdir}/*.c*)
#include_directories(${libdir})
#endmacro()
#add_3rdpart_lib(ilmbase 3rdparty/ilmbase-1.0.2)
#add_3rdpart_lib(openexr 3rdparty/openexr-1.7.0)
#add_3rdpart_lib(tiff    3rdparty/tiff-3.9.4)
#add_3rdpart_lib(z       3rdparty/zlib-1.2.5)

# Define the files
include(3rdpartyLibsCMakeFiles.txt)

set (lib_src
     ${core_src} 
     ${accelerators_src}
     ${cameras_src}
     ${film_src}
     ${filters_src}
     ${integrators_src}
     ${lights_src}
     ${materials_src}
     ${renderers_src}
     ${samplers_src}
     ${shapes_src}
     ${textures_src}
     ${volumes_src}

     ${ilmbase_src}
     ${openexr_src}
     ${tiff_src}
     ${z_src}
)

source_group(core FILES ${core_src})
source_group(accelerators FILES ${accelerators_src})
source_group(cameras FILES ${cameras_src})
source_group(film FILES ${film_src})
source_group(filters FILES ${filters_src})
source_group(integrators FILES ${integrators_src})
source_group(lights FILES ${lights_src})
source_group(materials FILES ${materials_src})
source_group(renderers FILES ${renderers_src})
source_group(samplers FILES ${samplers_src})
source_group(shapes FILES ${shapes_src})
source_group(textures FILES ${textures_src})
source_group(volumes FILES ${volumes_src})

source_group(3rdparty\\ilmbase FILES ${ilmbase_src})
source_group(3rdparty\\openexr FILES ${openexr_src})
source_group(3rdparty\\tiff FILES ${tiff_src})
source_group(3rdparty\\z FILES ${z_src})

add_definitions( -DPBRT_PROBES_NONE -DPBRT_HAS_OPENEXR -DZLIB_WINAPI -D_CRT_SECURE_NO_WARNINGS )

include(HeadCMakeFileLists.txt)
source_group(include FILES ${core_head})

include_directories(. core 3rdparty)
add_executable(pbrt ${renderer_src} ${lib_src} ${core_head})

if(USE_CUDA_RENDER)
    add_definitions(-DHAS_CUDA_RENDER)
    include_directories(${CMAKE_SOURCE_DIR})
    target_link_libraries (pbrt cuda_render)
    message(USE_CUDA)
endif(USE_CUDA_RENDER)

# The following is copied from the scon configure file, they may be needed by the unix platform
# Put them here in case I need to port the project back to linux platform
#output['pbrt_lib'] = env.StaticLibrary('libpbrt', lib_src)
#add_library(libpbrt ${lib_src})

#env_libs = [ ]
#output['pbrt'] = env.Program('pbrt', renderer_src + output['pbrt_lib'],
#                             LIBS = env_libs + exr_libs + parallel_libs)

#if arch == 'win32':
#    env.AddPostAction(output['pbrt'], 
#                      'mt.exe /outputresource:"$TARGET;#1" /manifest "${TARGET}.manifest" /nologo')
#output['defaults'] = [ output['pbrt' ] ]

#if len(exr_libs) > 0:
#    output['exrdiff'] = env.Program('exrdiff', [ 'tools/exrdiff.cpp' ], 
#                                    LIBS = env_libs + exr_libs)
#    output['exravg'] = env.Program('exravg', [ 'tools/exravg.cpp' ], 
#                                   LIBS = env_libs + exr_libs)
#    output['bsdftest'] = env.Program('bsdftest', [ 'tools/bsdftest.cpp' ] + 
#                                     output['pbrt_lib'], 
#                                     LIBS = env_libs + exr_libs + parallel_libs)
#    output['defaults'] = output['defaults'] +  \
#        [ output['exrdiff'], output['exravg'], output['bsdftest'] ]#
#
#if len(exr_libs) > 0 and len(tiff_libs) > 0:
#    output['exrtotiff'] = env.Program('exrtotiff', [ 'tools/exrtotiff.cpp' ], 
#                                      LIBS = env_libs + exr_libs + tiff_libs)
#    output['defaults'] = output['defaults'] + output['exrtotiff']
#
#Return('output')


